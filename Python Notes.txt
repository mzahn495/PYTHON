

############################################################################################### Working in Pycharm
import pandas
import request

data = pandas.DataFrame({
    'Days':['Monday','Tuesday','Wednesday','Thursday','Friday'],
    'Months':['Jan','Feb','Mar','Apr','May']
})

print(data)
###############################################################################################
############################################################################################### Working in Pycharm



import pandas as pd

df = pd.read_csv ("W:\Operations\mzahn_DB_tables\Customer_Contact.csv")
print (df)

###############################################################################################
DA NETWORK Contact-Name Phone Number DNS E-Mail Address SMTP E-Mail Address After Hours Circuit IDs















############################################################################################### OLD Crap ##############################################################################
C:\Program Files (x86)\Python36-32>pip install glob3

15408188119Mz!!

#Getting started 
To get into the vm environment go to the command prompt 

C:\Users\ab21600\Envs\spreadsheet_Ops\Scripts\activate.bat

then 

python -m idlelib.idle


os.listdir("W:/Moloch")
list = os.listdir("W:/Moloch")

print len([name for name in os.listdir('//ctl.intranet/govsvcs/IPSS_Capabilities/Customer Activations/Moloch/') if os.path.isfile(CFPB.csv)])

'cctl.intranet\govsvcs\IPSS_Capabilities\Customer Activations 






 if i = os.path.exist("//ctl.intranet/govsvcs/IPSS_Capabilities/Customer Activations/Moloch/BEA.csv")

def does_file_exist_in_dir(path):

    return any(isfile(join(path, i)) for listdir(path))


As an option , if you want to traverse through all sub-directories of a given path and check for files, you could use os.walk

for dir, i in os.walk(path)
    if not files:
        print("does not exist")

if not i in os.walk(path):
        print("does not exist")
		
for MyList in os.walk(path):
    if not MyList:
        print('Does not exist')


#####################################################################
C:\Program Files (x86)\Python36-32\Scripts\;C:\Program Files (x86)\Python36-32\;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\;%systemroot%\System32\WindowsPowerShell\v1.0\;%systemroot%\System32\WindowsPowerShell\v1.0\

C:\Users\ab21600\Envs\spreadsheet_Ops\Scripts\pythonw.exe

C:\Program Files (x86)\Python36-32\Scripts\;C:\Program Files (x86)\Python36-32\;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\;%systemroot%\System32\WindowsPowerShell\v1.0\;%systemroot%\System32\WindowsPowerShell\v1.0\

C:\Program Files (x86)\Python36-32\Scripts\;C:\Program Files (x86)\Python36-32\;C\Users\ab21600\Envs\spreadsheet_Ops\Lib\site-packages;

C:\Program Files (x86)\Python36-32\Scripts\;C:\Program Files (x86)\Python36-32\;C\Users\ab21600\Envs\spreadsheet_Ops\Lib\site-packages


############################################################

wb.get_sheet_names()
sh1 = wb.get_sheet_by_name('Sheet1')
wb.remove_sheet(sh1)

sh2 = wb.get_sheet_by_name('Sheet2')
wb.remove_sheet(sh2)

sh3 = wb.get_sheet_by_name('Sheet3')
wb.remove_sheet(sh3)

##########################################################

import sys
if "C:\\My_Python_Lib" not in sys.path:
    c

sys.path.append(r'C:\MyFolder\MySubFolder')

sys.path.append(r'C:\Users\ab21600\Envs\spreadsheet_Ops\Lib\site-packages')

sys.path.remove('C/Users/ab21600/Envs/spreadsheet_Ops/Lib/site-packages')

wb = openpyxl.load_workbook(r'C:\Users\ab21600\Desktop\example.xlsx')

sheet = wb.get_sheet_by_name('Sheet1')

import sys
>>> print('\n'.join(sys.path))

import openpyxl
import shutil
import copy
import pandas as pd
import os
import sys
import pathlib

import openpyxl as xl

MyList = ['OSHRC','SSS','NARA','NCPC','DOC-BEA','GSA','DOC-NTIS','VA','DOC-USPTO','SSA','NEA','DOC-BIS','RRB','IAF','DOC-HCHB','CFPB','FRTIB','DOC-NIST','EDU','OPM','DOE-JLAB',
          'NASA','TREAS','DOS','DOE-KCP','DOE-BNL','HHS-CSIRC','DOE-BPA','DOJ-FBI','HHS-HRSA','HHS-CMS','HHS-NIH','TREAS-IRS','HHS-IHS','NSF','HHS-FDA','HHS-CDC','HHS-NLM',
		  'DOC-ITA','FERC','DOT-FAA','DOC-NOAA','USITC','DOE-SRS','DOE-NNSS','DOE-PPPL','DOE-LLNL','OSC','FDIC','NASA-JPL','DOE-OSTI','DOE-NREL','FEC','DOE-SWPA','FED','PT',
		  'DOE-ORNL','ONHIR','TREAS-OCC','DOC-CENSUS','DOE-INL','DOE-LANL','DOE-PNNL','NCUA','DOE-SPR','SEC','STB','DOE-NPO','TVA','DOC-OIG','DOE-NRO','DOE-ANL','DOE-EMCBC',
		  'DOE-ETTP','DOE-WIPP','USCCR','USPS OIG','NRC','FLRA']




i = 0

path = 'C:/Users/ab21600/Documents/example2.xlsx'


wb = xl.load_workbook(filename=path)


for ws in wb.worksheets:

    for i in range(len(MyList):
        ws.title = i
        wb.create_sheet(ws.title)
        
        
wb.save(path)

if not os.path.isfile('FileName.xlsx'):
    wb = openpyxl.Workbook()  
    dest_filename = 'FileName.xlsx' 
	
#Worksheet from one workbook to another 
import openpyxl
import shutil
import copy

distinct_stores = ['willy']



for idx,store in enumerate(distinct_stores):
    workbook_iter_name = store+'.xlsx'
    #using a blank, single worksheet xlsx file for illustration purposes
    shutil.copyfile('blank.xlsx',workbook_iter_name)
    primary = openpyxl.load_workbook(workbook_iter_name)
    reps_per_store = ['one','two','three','four','five','six','seven','eight','nine','ten','eleven','twelve','thirteen']
    for ido,reps in enumerate(reps_per_store): 
        ws = primary.get_sheet_by_name('rep')
        primary.add_sheet(copy.deepcopy(ws),ido+1)
        wss=primary.worksheets[ido+1]
        wss.title = reps
    primary.save(workbook_iter_name)
	

    ws = x.get_sheet_by_name('Sheet1')
    

	
	

wb = xl.load_workbook(filename=path1)

sh2=wb.get_sheet_by_name('Sheet2')
sh3=wb.get_sheet_by_name('Sheet3')

wb.remove_sheet(sh2)
wb.remove_sheet(sh3)

for ws in wb.worksheets:
    
    for i in sorted(MyList):
        ws.title = i
        wb.create_sheet(ws.title)
        
wb.save(path1)

for x in dirlist:
    print(x)
    load = xl.load_workbook(x)
    ws = x.get_sheet_by_name('Sheet1')

wb = xl.load_workbook(filename=path1)    

###################################################################
#openpyxl copy

import openpyxl
import shutil
import copy
import pandas as pd
import os
import sys
import pathlib

import openpyxl as xl

MyList = ['OSHRC','SSS','NARA','NCPC','DOC-BEA','GSA','DOC-NTIS','VA','DOC-USPTO','SSA','NEA','DOC-BIS','RRB','IAF','DOC-HCHB','CFPB','FRTIB','DOC-NIST','EDU','OPM','DOE-JLAB',
          'NASA','TREAS','DOS','DOE-KCP','DOE-BNL','HHS-CSIRC','DOE-BPA','DOJ-FBI','HHS-HRSA','HHS-CMS','HHS-NIH','TREAS-IRS','HHS-IHS','NSF','HHS-FDA','HHS-CDC','HHS-NLM',
		  'DOC-ITA','FERC','DOT-FAA','DOC-NOAA','USITC','DOE-SRS','DOE-NNSS','DOE-PPPL','DOE-LLNL','OSC','FDIC','NASA-JPL','DOE-OSTI','DOE-NREL','FEC','DOE-SWPA','FED','PT',
		  'DOE-ORNL','ONHIR','TREAS-OCC','DOC-CENSUS','DOE-INL','DOE-LANL','DOE-PNNL','NCUA','DOE-SPR','SEC','STB','DOE-NPO','TVA','DOC-OIG','DOE-NRO','DOE-ANL','DOE-EMCBC',
		  'DOE-ETTP','DOE-WIPP','USCCR','USPS OIG','NRC','FLRA']



chdir =os.chdir("c:/Users/ab21600/Documents/DA")
dirlist = os.listdir("c:/Users/ab21600/Documents/DA")
main_workbook = "c:/Users/ab21600/Documents/DA/main.xlsx"
path2 = "C:/Users/ab21600/Documents/example2.xlsx"




for x in sorted(dirlist):
    print(x)
    #load = xl.load_workbook(x)
	
######################################################################
import openpyxl
import shutil
import copy
import pandas as pd
import os
import sys
import pathlib
from openpyxl import Workbook
from openpyxl.cell import get_column_letter

import openpyxl as xl

MyList = ['OSHRC','SSS','NARA','NCPC','DOC-BEA','GSA','DOC-NTIS','VA','DOC-USPTO','SSA','NEA','DOC-BIS','RRB','IAF','DOC-HCHB','CFPB','FRTIB','DOC-NIST','EDU','OPM','DOE-JLAB',
          'NASA','TREAS','DOS','DOE-KCP','DOE-BNL','HHS-CSIRC','DOE-BPA','DOJ-FBI','HHS-HRSA','HHS-CMS','HHS-NIH','TREAS-IRS','HHS-IHS','NSF','HHS-FDA','HHS-CDC','HHS-NLM',
		  'DOC-ITA','FERC','DOT-FAA','DOC-NOAA','USITC','DOE-SRS','DOE-NNSS','DOE-PPPL','DOE-LLNL','OSC','FDIC','NASA-JPL','DOE-OSTI','DOE-NREL','FEC','DOE-SWPA','FED','PT',
		  'DOE-ORNL','ONHIR','TREAS-OCC','DOC-CENSUS','DOE-INL','DOE-LANL','DOE-PNNL','NCUA','DOE-SPR','SEC','STB','DOE-NPO','TVA','DOC-OIG','DOE-NRO','DOE-ANL','DOE-EMCBC',
		  'DOE-ETTP','DOE-WIPP','USCCR','USPS OIG','NRC','FLRA']





i = 0

path = 'C:/Users/ab21600/Documents/DA/CFPB.xlsx'

wb = xl.load_workbook(filename=path)
ws = wb.worksheets
wb.active = 0
for column_cells in ws.columns:
    length = max(len(as_text(cell.value)) for cell in column_cells)
    ws.column_dimensions[column_cells[0].column].width = length


wb.save(path)

#################################################################
	
###############################################################################################
###############################################################################################
import openpyxl
import shutil
import copy

distinct_stores = ['willy']



for idx,store in enumerate(distinct_stores):
    workbook_iter_name = store+'.xlsx'
    #using a blank, single worksheet xlsx file for illustration purposes
    shutil.copyfile('blank.xlsx',workbook_iter_name)
    primary = openpyxl.load_workbook(workbook_iter_name)
    reps_per_store = ['one','two','three','four','five','six','seven','eight','nine','ten','eleven','twelve','thirteen']
    for ido,reps in enumerate(reps_per_store): 
        ws = primary.get_sheet_by_name('rep')
        primary.add_sheet(copy.deepcopy(ws),ido+1)
        wss=primary.worksheets[ido+1]
        wss.title = reps
    primary.save(workbook_iter_name)
	

    ws = x.get_sheet_by_name('Sheet1')
    

	
	

wb = xl.load_workbook(filename=path1)

sh2=wb.get_sheet_by_name('Sheet2')
sh3=wb.get_sheet_by_name('Sheet3')

wb.remove_sheet(sh2)
wb.remove_sheet(sh3)

for ws in wb.worksheets:
    
    for i in sorted(MyList):
        ws.title = i
        wb.create_sheet(ws.title)
        
wb.save(path1)

for x in dirlist:
    print(x)
    load = xl.load_workbook(x)
    ws = x.get_sheet_by_name('Sheet1')

wb = xl.load_workbook(filename=path1)    

###############################################################################################
###############################################################################################
import openpyxl

data = open(r'C:\Users\ab21600\Desktop\example2.xls')


wb = openpyxl.load_workbook(r'C:\Users\ab21600\Desktop\example2.xlsx')


from openpyxl import Workbook
wb = Workbook()

# grab the active worksheet
ws = wb.active

# Data can be assigned directly to cells
ws['A1'] = 42

# Rows can also be appended
ws.append([1, 2, 3])

# Python types will automatically be converted
import datetime
ws['A2'] = datetime.datetime.now()

# Save the file
wb.save("sample.xlsx")

column_widths = []
for row in workSheet.iter_rows():
    for i, cell in enumerate(row):
        try:
            column_widths[i] = max(column_widths[i], len(cell.value))
        except IndexError:
            column_widths.append(len(cell.value))

for i, column_width in enumerate(column_widths):
    workSheet.column_dimensions[get_column_letter(i + 1)].width = column_width

###############################################################################################
###############################################################################################
import openpyxl
import shutil
import copy
import pandas as pd
import os
import sys
import pathlib
from openpyxl import Workbook


import openpyxl as xl

MyList = ['OSHRC','SSS','NARA','NCPC','DOC-BEA','GSA','DOC-NTIS','VA','DOC-USPTO','SSA','NEA','DOC-BIS','RRB','IAF','DOC-HCHB','CFPB','FRTIB','DOC-NIST','EDU','OPM','DOE-JLAB',
          'NASA','TREAS','DOS','DOE-KCP','DOE-BNL','HHS-CSIRC','DOE-BPA','DOJ-FBI','HHS-HRSA','HHS-CMS','HHS-NIH','TREAS-IRS','HHS-IHS','NSF','HHS-FDA','HHS-CDC','HHS-NLM',
		  'DOC-ITA','FERC','DOT-FAA','DOC-NOAA','USITC','DOE-SRS','DOE-NNSS','DOE-PPPL','DOE-LLNL','OSC','FDIC','NASA-JPL','DOE-OSTI','DOE-NREL','FEC','DOE-SWPA','FED','PT',
		  'DOE-ORNL','ONHIR','TREAS-OCC','DOC-CENSUS','DOE-INL','DOE-LANL','DOE-PNNL','NCUA','DOE-SPR','SEC','STB','DOE-NPO','TVA','DOC-OIG','DOE-NRO','DOE-ANL','DOE-EMCBC',
		  'DOE-ETTP','DOE-WIPP','USCCR','USPS OIG','NRC','FLRA']



i = 0

path = 'C:/Users/ab21600/Documents/DA/CFPB.xlsx'

wb = xl.load_workbook(filename=path)
ws = wb.worksheets
wb.active = 0
for column_cells in ws.columns:
    length = max(len(as_text(cell.value)) for cell in column_cells)
    ws.column_dimensions[column_cells[0].column].width = length


wb.save(path)
###############################################################################################
###############################################################################################
import openpyxl
from string import ascii_uppercase

newfile = 'C:/Users/ab21600/Documents/DA/CFPB.xlsx'

wb = openpyxl.load_workbook(filename = newfile)
worksheet = wb.active

for col in worksheet.columns:
     max_length = 0
     column = col[0].column # Get the column name
     for cell in col:
         try: # Necessary to avoid error on empty cells
             if len(str(cell.value)) > max_length:
                 max_length = len(cell.value)
         except:
             pass
     adjusted_width = (max_length + 2) * 1.2
     worksheet.column_dimensions[column].width = adjusted_width
wb.save(newfile)
###############################################################################################
###############################################################################################
#import sys
#import xlsxwriter



    xl = pd.ExcelFile("C:/Users/ab21600/Documents/Python-Remedy-Report/test1.xlsx")
    df = xl.parse("test")
    #df = df.sort_values(columns="Short Problem Description")
    #df = df.sort_values(by=["Short Problem Description", "NTM Ticket ID", "Create Date", "Last-Modified-Date", "Service ID", "Priority", "Last External Comment Time"])
    df = df.sort_values(by=["Short Problem Description"])
                        
    writer = pd.ExcelWriter('C:/Users/ab21600/Documents/Python-Remedy-Report/output.xlsx')
    df.to_excel(writer,sheet_name='Sheet1',columns=["NTM Ticket ID", "Create Date", "Last-Modified-Date", "Service ID", "Short Problem Description", "Priority", "Last External Comment Time"],index=False)
    writer.save()

	#####################################################
	#df = df.sort_values(columns="Short Problem Description")
	#df1.dropna(subset=['NTM Ticket ID'], inplace=True)
#df1.dropna(subset=['Create Date'], inplace=True)
#df.dropna(subset=['Last-Modified-Date'], inplace=True)
#df.dropna(subset=['Service ID'], inplace=True)
#df.dropna(subset=['Short Problem Description'], inplace=True)
#df.dropna(subset=['Priority'], inplace=True)
#df.dropna(subset=['Last External Comment Time'], inplace=True)



df2 = pd.DataFrame(columns=df1.columns)
#condition = df1.loc['Short Problem Description'].filter(regex='a', axis=0)

#df1.set_index('Short Problem Description').filter(regex='^\[A]', axis=0)    # Works on the IDLE
#df1.set_index('Short Problem Description').filter(regex='^\*', axis=0)      # Works on the IDLE
#df1.set_index('Short Problem Description').filter(regex='^\[M]', axis=0)    # Works on the IDLE
condition = df1.set_index('Short Problem Description').filter(regex='^\[A]', axis=0) # Works on the IDLE


#condition = df1['Short Problem Description']

# The axis need to be define zero in order to get the row
#condition = df1['Short Problem Description'].filter(regex='^\[A]', axis=0)
#condition = df1.filter(regex='\[A]', axis=1)
#condition = df1.filter(like='[A]', axis=1)
#condition = df1[df['Short Problem Description'].str.contains("[A]")]
#condition = df1['Priority'] > 2
#condition = df1.Priority > 2
#rows = df1.loc[condition, :]
#rows = df1.loc[condition, :]
#rows = condition

#The ignore_index=False includes the index, in this case int would be 'Short Problem Description'
df2 = df2.append(condition, ignore_index=True)

#df = df.sort_values(by=["Short Problem Description"])
#rows = df1.loc[cond, :]

#df1.drop(condition.index, inplace=True)
#
#condition = df1.F < 2
#rows = df1.loc[condition, :]
#df2 = df2.append(rows, ignore_index=True)
#df1.drop(rows.index, inplace=True)

#writer = pd.ExcelWriter('C:/Users/ab21600/Documents/Python-Remedy-Report/output.xlsx', engine='xlsxwriter')
#df1.to_excel(writer, sheet_name='Sheet1')
#df2.to_excel(writer, sheet_name='Sheet2')

#df1.to_excel(writer,sheet_name='Sheet1',columns=["NTM Ticket ID", "Create Date", "Last-Modified-Date", "Service ID", "Short Problem Description", "Priority", "Last External Comment Time"],index=False)
#writer.save()
#writer = pd.ExcelWriter('C:/Users/ab21600/Documents/Python-Remedy-Report/output.xlsx', engine='xlsxwriter')
#df2.to_excel(writer,sheet_name='Sheet2',columns=["NTM Ticket ID", "Create Date", "Last-Modified-Date", "Service ID", "Short Problem Description", "Priority", "Last External Comment Time"],index=False)

df2 = pd.DataFrame(columns=df.columns)

df1 = df.set_index('Short Problem Description').filter(regex='^\[A]', axis=0)
condition = df1
rows = df1.loc[condition, :]
df2 = df2.append(rows, ignore_index=True)
df1.drop(rows.index, inplace=True)


df1 = output.parse("Sheet1")
df1 = df.sort_values(by=["Short Problem Description", "NTM Ticket ID", "Create Date", "Last-Modified-Date", "Service ID", "Priority", "Last External Comment Time"])
df1 = df1.fillna('')
###############################################################################################
###############################################################################################
#Remedy Report 
#
import copy
import openpyxl
from openpyxl import Workbook
import os
import shutil
import sys
import csv
import pathlib
import xlswriter
import glob
import xlrd
import numpy
import pandas as pd
import pyexcel.ext.xlsx
from pyexcel.cookbook import merge_all_to_a_book
import pyexcel.ext.xlsx




def convert_mult_csv_to_excel():
#One liner that merges multiple CSV files into on Excel Workbook
    merge_all_to_a_book(glob.glob("directory/*.csv"), "output.xlsx")

def formating_columns
    for column in ascii_uppercase:
    if (column=='A'):
        worksheet.column_dimensions[column].width = 30
    elif(column=='B'):
        worksheet.column_dimensions[column].width = 20
    elif(column=='C'):
        worksheet.column_dimensions[column].width = 20
    elif(column=='D'):
        worksheet.column_dimensions[column].width = 20
    elif(column=='E'):
        worksheet.column_dimensions[column].width = 60
    elif(column=='F'):
        worksheet.column_dimensions[column].width = 20
    elif(column=='G'):
        worksheet.column_dimensions[column].width = 10
wb.save(newfile)

def sorting_worksheet

#import openpyxl



f1 = open('file1', 'r')
f2 = open('file1', 'r')
f3 = open('file1', 'r')

regex = r"\w[1-9][1-9][1-9]
regex r"w\+[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}

for a in f1:
    for b in f2:
	  for c in f3:
	       if re.search 

