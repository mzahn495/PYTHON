

Import modules 

	-You can import modules and get access to new functions.
	-The modules that come with Python are called the standard library,
	 but you can alos install third-party modules using the pip tool.
	-the sys.ext()function will immediately quit your program.
	-the pyperclip third-party modules has copy() and paste() functions for reading and writing test to the clipboard.
	
	
Writing Your Own function 

	def hello():
		print('Howdy!')
		print('Howdy!!!')
		print('Hello there.')

		
	hello()
	hello()
	hell()
	
	def hello(name):
	    print('Hello ' + name)
		
	
	hello('Alice')
	hello('Bob')
	
	-Argument = the value passed in the function call (i.e Alice and Bob)
	-Parameter = The variable inside the function (name).
	
	-the end keyword argument print on one line
		print('Hello' end=' ')
		print('World')
		
	Print function will create a space between each arguments
	
	the sep='ABC'  this change the separator to ABC

	
	- Functions are like a mini-program inside your program.
	- The main point of the function s is to get rid of duplicate code.
	- the def statement defines a function.
	- The input functions are arguments. the output is the return value.
	- the parameters are the variables in between the function's parentheses in the def statement.
	- The return value is a specified using the return statement.
	- Every function has a return value. If your function doesn't have a return statement, the default return value is None.
	- Keyword arguments to functions are usually for optional arguments.
	- The print() function has keywords arguments end and sep.
	
	Global & Local Scopes
	
	- A scope can be thought of as an area of the source code, and as a container of variables.
	- The globe scope is code outside of all functions. Variables assigned here are global variables.
	- Each function's code is in its own local scope. Variables assigned here are local variables.
	- Code in a global scope cannot use any local variables.
	- Code in a function's local scope cannot use a variables in any another function's local scope.
	- If there's an assignment statement for a variable in a function, that is a local variable.
	
The List Data Type

	- A list is a value that contains multiple values.
	- The values in a list are also called items.
	- You can access items in a list with it's integer index.
	- The indexes start at 0 and 1.
	- You can also use negative indexes. -1 refers to the last item, -2 refers to the second to last 
	  item, and so on.
	- You can get multiple items from the list using a slice.
	- The slice has two indexes. The new list's items start at the first index and go up to, but doesn't include, the second index.
	- The len() function, concatenation, and replication work the same way with lists that they do with strings.
	- You can convert a value into a list by it to the list() function.
	
For Loop with List, Multiple Assignment, and 

	- For loops technically iterate over the value in a list.
	- The range() function returns a list-like value, which can be passed to the list() function if you need an actual list value.
	- variables can swap their values using multiple assignment.
	- Augmented assignment operators like += are used as shortcuts.
	
List Methods

	- Methods are functions that are "called on " values.
	- The index() list method returns the index of an item in a list.
	- The append() list method adds a value to the end of a list.
	- The insert() list method adds a value anywhere inside a list.
	- The remove() list method removes an item, specified by the value, from a list.
	- The sort() list method sorts the items in a list.
	- The sort() method's reverse=True keyword argument can sort in reverse order.
	- Sorting happens in "ASCII-betical" order. To sort normally, pass key=str.lower.
	- These list methods operate on the list "in place", rather that returning a new list value.
	
Similarities between List and Functions

	- Strings can do a lot of the same things lists can do, but strings are immutable.
	- Immutable values like strings and tuples cannot be modified "in place".
	- Mutable values like lists can be modified in place.
	- Variables don't contain lists, they contain references to lists.
	- When passing a list argument to a function, you are actually passing a list reference.
	- Changes made to a list in a function will affect the list outside the function.
	- The \line continuation character can be used to stretch Python instructions across multiple lines.
	Ref "Facts and myths about Python names and values"  https://youtu.be/_AEJHKGk9ns

The Dictionary Data Type
################################### Code ################################
import pprint
message = '''
            An entry book
			'''
count = {}

for character in message.upper():
    count.setdefault(character, 0)
	count[character] = count[character] + 1
	
pprint.pprint(count)
or
var_print = pprint.pprint(count)
print(var_print)

	- Dictionaries contain key-value pairs. Keys are like a list's indexes.
	- Dictionaries are mutable. Variables hold references to dictionary values, not the dictionary value it self.
	- Dictionaries are unordered. There is no "first" key-value pair in a dictionary.
	- The keys(), values(), and items() methods will return list-like values of a dictionary's keys, values, and both keys and values, respectively.
	- The get() method can return a default value if a key doesn't exist.
	- The set default() method can set a value if a key doesn't exist.
	- The pprint module's pprint()"pretty print" function can display a dictionary value cleanly. The pformat() function returns a string value of this output.
	

Advanced String Syntax

	- Strings can begin and end with double quotes.
	- Escape characters that are hard to type inside strings.
	- Raw strings will literally print any backslashes in the string and ignore escape characters.
	- Multiline strings being and end with three quotes, and can span multiple lines.
	- Indexes, slices, and the in and not in operators all work with strings.
	
String Methods

	isalpha() - letters only
	isalnum() - letters and number only
	isdecimal() - numbers only
	isspace() - whitespace only 
	istitle() - titlecase only
	
	startswith()
	endswith()
	join() -method  
			','.join(['cats', 'rats', 'bats'])
			''.join(['cats', 'rats', 'bats'])
			'\n\n'.jon(['cats', 'rats', 'bats'])
	split() - split on space
	rjust(10) - justifies to the right
	ljust(10 -justifies it to the left
	.center(20)
	Strip off white spaces 
		spam.strip()
		lstrip()
		rstrip()
	
	replace method
		spam = "hello there"
		spam.replace('e', 'XYZ')
	
	pyperclip Module - copies and paste based off of your clip board
		pyperclip.copy('Hello')
		pyperclip.paste()
		
	- upper() and lower() return an uppercase or lowercase string.
	- isupper(), islower(), islapha(), isalnum(), isdecimal(), isspace(), istitle() returns True or False if the string is that respective kind of string.
	- startswith() and endswith() also return bools.
	- ','.join(['cat', 'dog']) returns a string that combines the string in a list.
	- 'Hello world '.split() returns a list of strings, split from the string it's called on.
	- rjust(), ljust(), center() returns a string padded with spaces.
	- strip(), rstrip(), lstrip() returns a string with whitespace stripped off the sides.
	- replace() will replace all occurrences of the first string argument with the second string argument
	- pyperclip has copy() and paste() functions for using the clipboard.
	
String formatting 

	
Launching Python Programs from Outside IDLE

	- The shebang line tells yhour computer that you want to run the script using 
	Python 3.
	- On Windows, you can bring up the Run dialog by pressing  Win+R
	- A batch file can save you a lot of typing by running multiple commands.
	- The batch files you'll make will look like this:
		
		@py C:\Users\Al\MyPython Scriptd\hello.py %*
		@pause
		
	- You'll need to add the MyPythonScripts folder to the PATH environment 
	variables first. 
	- Commands-line arguments can be read in the syss,argv list.
	
Regular Expression Basic 

	- Regular expressions are mini-language for specifying text patterns, writing code to do pattern matching without regular expressions is a huge pain.
	- Regex strings often use \ backslashes(like \d), so they are often raw strings: r'\d'
	- Import the re module first.
	- Call the re.compile() function to create a regex object.
	- Call the regex object's search() method to create a match object.
	- Call the match object's group() method to get the matched string.
	- \d is the regex for a numeric digit character.
	
Regex Groups and the Pipe Character

	- Groups are created in regex strings with parentheses.
	- The first set of parentheses is group 1, the second is 2 and so on.
	- Calling group() or group(0) returns the full matching string, group(1)
	returns group 1's matching string, and so on.
	- Use \( and \) to match literal parentheses in the regex string.
	- The | pipe can match one of many possible groups.
	
Repetition in Regex Patterns and Greedy/Nongre....

	For example if you wanted a regex object for the text "dinner?" (with the question mark), you would call:
	
			>>> re.compile(r'dinner\?')  # note the slash in \?
			
	( in the above case, "dinner" is not optional, we are literally looking for a question mark: "dinner?")
	
	- The ? says the group matches zero or more times.
	- The * says the group matches zero or more times.
	- The + says the group matches one or more times.
	- The curly braces can match a specific number of times.
	- The curly braces with two numbers matches a minimum and maximum
	number of times.
	- Leaving out the first or second number in the curly braces says there is no 
	minimum or maximum.
	- Greedy matching match the logest string possible, non greedy matching match the shorted string possible.
	- Putting a question mark after the curly braces makes it do a non greedy match.
	
Regex Character Classes and the findall() method

	- Correction: this is the behavior for regex objects that have zeros OR ONE groups in them
	
	Character Classes
	- The regex method findall() is passed a string, and returns all matches in it, not just the first match.
	- If the regex has 0 or 1 group, findall() returns a list of strings.
	- If the regex has 2 pr more groups , findall() returns a list of tuples of strings.
	- \d is shorthand character class that matches digits. \w matches word characters,
	   \s matches whitespaces characters.
	-The uppercase shorthand character classes \D, \W, \S match characters that are NOT digits, word character, and spaces.
	- You can make your own character classes with square brackets: [aeiou]
	- A ^ caret makes it a negative character class, matching anything not in the brackets [Aeiou]	
	
		
			
	
	
	
	
	